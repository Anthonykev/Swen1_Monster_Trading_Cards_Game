

### **1. Container starten:**

- Mit `docker run` kannst du einen neuen Container starten:
    
    ```bash
    docker run -d --name postgresdb -e POSTGRES_USER=kevin -e POSTGRES_PASSWORD=spiel12345 -e POSTGRES_DB=monster_cards -p 5432:5432 -v pgdata:/var/lib/postgresql/data postgres
    
    ```
    
- Mit `docker-compose` (wenn du eine `docker-compose.yml`Datei hast):
    
    ```bash
    docker-compose up -d
    
    ```
    
    > Der Parameter -d startet die Container im Hintergrund.
    > 

### **2. Container anzeigen:**

- Alle laufenden Container anzeigen:
    
    ```bash
    docker ps
    
    ```
    
- Auch gestoppte Container anzeigen:
    
    ```bash
    docker ps -a
    
    ```
    

### **3. Container stoppen:**

- Einen bestimmten Container stoppen:
    
    ```bash
    docker stop postgresdb
    
    ```
    
- Alle Container stoppen:
    
    ```bash
    docker stop $(docker ps -q)
    
    ```
    

### **4. Container löschen:**

- Einen bestimmten Container löschen:
    
    ```bash
    docker rm postgresdb
    
    ```
    
- Alle Container löschen:
    
    ```bash
    docker rm $(docker ps -a -q)
    
    ```
    
    > Achtung: Der Container darf nicht laufen, bevor du ihn löschen kannst.
    > 

### **5. Volumes löschen:**

- Volumes speichern Daten wie deine PostgreSQL-Datenbank. Wenn du ein Volume löschen willst:
    
    ```bash
    docker volume rm pgdata
    
    ```
    
- Alle Volumes löschen:
    
    ```bash
    docker volume prune
    
    ```
    

### **6. Logs anzeigen:**

- Die Logs eines laufenden Containers ansehen:
    
    ```bash
    docker logs postgresdb
    
    ```
    

### **7. Container erneut starten:**

- Einen gestoppten Container wieder starten:
    
    ```bash
    docker start postgresdb
    
    ```
    
- Alle Container mit `docker-compose` starten:
    
    ```bash
    docker-compose up -d
    
    ```
    

---

### Typischer Workflow für deinen PostgreSQL-Container

1. **Container starten:**
    
    ```bash
    docker-compose up -d
    
    ```
    
2. **Überprüfen, ob der Container läuft:**
    
    ```bash
    docker ps
    
    ```
    
3. **Container stoppen:**
    
    ```bash
    docker stop postgresdb
    
    ```
    
4. **Container erneut starten:**
    
    ```bash
    docker start postgresdb
    
    ```
    
5. **Container und Daten aufräumen (bei Bedarf):**
    
    ```bash
    docker stop postgresdb
    docker rm postgresdb
    docker volume rm pgdata
    
    ```
    

---

### Docker im Alltag

- Docker isoliert deine Anwendung von deiner lokalen Umgebung, sodass Konflikte (z. B. unterschiedliche PostgreSQL-Versionen) vermieden werden.
- Docker-Container sind leichtgewichtig und können schnell gestoppt, gestartet oder gelöscht werden.
- Mit `docker-compose` kannst du mehrere Dienste (z. B. PostgreSQL und deinen Server) einfach miteinander verbinden.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                  #Postgres 
                                
                                    
### **3. In den Container einloggen**

Um in den Container zu wechseln:

```bash
docker exec -it postgresdb bash

```

**Erklärung:** Öffnet eine Bash-Shell im Container.

---

### **4. PostgreSQL-Konsole (`psql`) starten**

Innerhalb des Containers:

```bash
psql -U kevin -d monster_cards

```

**Erklärung:**

- `U kevin`: Gibt den PostgreSQL-Benutzernamen `kevin` an.
- `d monster_cards`: Verbindet sich mit der Datenbank `monster_cards`.

---

### **5. Tabellenstruktur anzeigen**

In der PostgreSQL-Konsole kannst du die Struktur einer bestimmten Tabelle (z. B. `cards`) anzeigen:

```sql
\d cards

```

**Erklärung:**

- Zeigt die Spaltennamen, Datentypen und Einschränkungen der Tabelle `cards`.

---

### **6. Alle Tabellen anzeigen**

Um alle Tabellen der Datenbank zu sehen:

```sql
\dt

```

**Erklärung:** Zeigt eine Liste aller Tabellen in der aktuellen Datenbank.

---

### **7. Daten einer Tabelle anzeigen**

Um den Inhalt einer Tabelle (z. B. `cards`) zu sehen:

```sql
SELECT * FROM cards;
SELECT * FROM users;

```

**Erklärung:** Zeigt alle Zeilen und Spalten der Tabelle `cards`.

---

### **8. Daten in die Tabelle einfügen**

Um Daten in die Tabelle `cards` einzufügen, verwende den Befehl:

```sql
INSERT INTO cards (name, type, damage, elementtype, userid)
VALUES ('Fire Dragon', 'Dragon', 100, 'Fire', 1);

```

**Erklärung:** Fügt eine Karte mit den angegebenen Werten in die Tabelle ein.

---

### **9. Weitere Daten einfügen**

Du kannst mehrere Datensätze gleichzeitig einfügen:

```sql
INSERT INTO cards (name, type, damage, elementtype, userid)
VALUES
('Water Serpent', 'Serpent', 80, 'Water', 2),
('Earth Golem', 'Golem', 120, 'Earth', 3);

```

---

### **10. Tabelle filtern**

Zeige z. B. nur Karten eines bestimmten Typs:

```sql
SELECT * FROM cards WHERE type = 'Dragon';

```

**Erklärung:** Zeigt nur die Zeilen, bei denen `type` = `Dragon` ist.

---

### **11. Tabelle sortieren**

Zeige Karten sortiert nach Schaden in absteigender Reihenfolge:

```sql
SELECT * FROM cards ORDER BY damage DESC;

```

---

### **12. PostgreSQL-Konsole verlassen**

Um die `psql`-Konsole zu beenden:

```sql
\q

```

---

### **13. Container verlassen**

Um die Bash-Shell des Containers zu verlassen:

```bash
exit

```

---

## **Zusammenfassung aller Befehle**

### **Docker-Befehle:**

1. **Container starten:**
    
    ```bash
    docker run -d --name postgresdb -e POSTGRES_USER=kevin -e POSTGRES_PASSWORD=spiel12345 -e POSTGRES_DB=monster_cards -p 5432:5432 -v pgdata:/var/lib/postgresql/data postgres
    
    ```
    
2. **Container überprüfen:**
    
    ```bash
    docker ps
    
    ```
    
3. **In den Container einloggen:**
    
    ```bash
    docker exec -it postgresdb bash
    
    ```
    

### **PostgreSQL-Befehle:**

1. **PostgreSQL-Konsole starten:**
    
    ```bash
    psql -U kevin -d monster_cards
    
    ```
    
2. **Tabellen anzeigen:**
    
    ```sql
    \dt
    
    ```
    
3. **Tabellenstruktur anzeigen:**
    
    ```sql
    \d cards
    
    ```
    
4. **Daten anzeigen:**
    
    ```sql
    SELECT * FROM cards;
    
    ```
    
5. **Daten einfügen:**
    
    ```sql
    INSERT INTO cards (name, type, damage, elementtype, userid)
    VALUES ('Fire Dragon', 'Dragon', 100, 'Fire', 1);
    
    ```
    
6. **Daten filtern:**
    
    ```sql
    SELECT * FROM cards WHERE type = 'Dragon';
    
    ```
    
7. **Daten sortieren:**
    
    ```sql
    SELECT * FROM cards ORDER BY damage DESC;
    
    ```
    
8. **PostgreSQL verlassen:**